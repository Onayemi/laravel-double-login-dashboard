laravel new multi-user-login
composer require laravel/ui

php artisan ui bootstrap --auth
npm install && npm run dev

create database
php artisan migrate

php artisan make:middleware IsAdmin

Register the middleware in kernel.php

'is_admin' => \App\Http\Middleware\IsAdmin::class,

Add this to middleware IsAdmin.php

public function handle(Request $request, Closure $next)
    {
        if(auth()->user()->is_admin == 1) {
            return $next($request);
        }
        return redirect('home')->with('error', 'You have no admin access.');
    }

HomeController.php

public function index(){
    return view('home');
}

public function adminHome(){
    return view('admin-home');
}

in route/web.php
Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');
Route::get('admin/home', [App\Http\Controllers\HomeController::class, 'adminHome'])->name('admin.home')->middleware('is_admin');

next is LoginController.php write Login method

use Illuminate\Http\Request;

public function login(Request $request){
    $input = $request->all();
    
    $this->validate($request, [
        'email' => 'required|email',
        'password' => 'required'
    ]);

    if(auth()->attempt(array('email' => $input['email'], 'password' => $input['password']))){
        if(auth()->user()->is_admin == 1){
            return redirect()->route('admin.home');
        }
        return redirect('home');
    }
    return redirect()->route('login')->with('error', 'Invalid Credential!');
}

Install Toastr
composer require brian2694/laravel-toastr

====Laravel flutterwave====
https://laravelrave.netlify.app/getting-started/installation.html#configuration

composer require kingflamez/laravelrave

For Laravel => 5.5, skip this step and go to configuration

Once Flutterwave is installed, you need to register the service provider. Open up config/app.php and add the following to the providers key.

'providers' => [
    /*
     * Package Service Providers...
     */
    ...
    KingFlamez\Rave\RaveServiceProvider::class,
    ...
]
Also add this to the aliases

'aliases' => [
    ...
    'Rave' => KingFlamez\Rave\Facades\Rave::class,
    ...
]
#Configuration
Publish the configuration file using this command:

php artisan vendor:publish --provider="KingFlamez\Rave\RaveServiceProvider"

FLW_PUBLIC_KEY=FLWPUBK-xxxxxxxxxxxxxxxxxxxxx-X
FLW_SECRET_KEY=FLWSECK-xxxxxxxxxxxxxxxxxxxxx-X
FLW_SECRET_HASH='My_lovelysite123'

FLW_PUBLIC_KEY - This is the api public key gotten from your dashboard (compulsory)
FLW_SECRET_KEY - This is the api secret key gotten from your dashboard (compulsory)
FLW_SECRET_HASH - This is the secret hash for your webhook

// The route that the button calls to initialize payment
Route::post('/pay', [FlutterwaveController::class, 'initialize'])->name('pay');
// The callback url after a payment
Route::get('/rave/callback', [FlutterwaveController::class, 'callback'])->name('callback');

<h3>Buy Movie Tickets N500.00</h3>
<form method="POST" action="{{ route('pay') }}" id="paymentForm">
    {{ csrf_field() }}

    <input name="name" placeholder="Name" />
    <input name="email" type="email" placeholder="Your Email" />
    <input name="phone" type="tel" placeholder="Phone number" />

    <input type="submit" value="Buy" />
</form>

=== controller ===
<?php

namespace App\Http\Controllers;

use KingFlamez\Rave\Facades\Rave as Flutterwave;

class FlutterwaveController extends Controller
{
    /**
     * Initialize Rave payment process
     * @return void
     */
    public function initialize()
    {
        //This generates a payment reference
        $reference = Flutterwave::generateReference();

        // Enter the details of the payment
        $data = [
            'payment_options' => 'card,banktransfer',
            'amount' => 500,
            'email' => request()->email,
            'tx_ref' => $reference,
            'currency' => "NGN",
            'redirect_url' => route('callback'),
            'customer' => [
                'email' => request()->email,
                "phone_number" => request()->phone,
                "name" => request()->name
            ],

            "customizations" => [
                "title" => 'Movie Ticket',
                "description" => "20th October"
            ]
        ];

        $payment = Flutterwave::initializePayment($data);


        if ($payment['status'] !== 'success') {
            // notify something went wrong
            return;
        }

        return redirect($payment['data']['link']);
    }

    /**
     * Obtain Rave callback information
     * @return void
     */
    public function callback()
    {
        
        $status = request()->status;

        //if payment is successful
        if ($status ==  'successful') {
        
        $transactionID = Flutterwave::getTransactionIDFromCallback();
        $data = Flutterwave::verifyTransaction($transactionID);

        dd($data);
        }
        elseif ($status ==  'cancelled'){
            //Put desired action/code after transaction has been cancelled here
        }
        else{
            //Put desired action/code after transaction has failed here
        }
        // Get the transaction from your DB using the transaction reference (txref)
        // Check if you have previously given value for the transaction. If you have, redirect to your successpage else, continue
        // Confirm that the currency on your db transaction is equal to the returned currency
        // Confirm that the db transaction amount is equal to the returned amount
        // Update the db transaction record (including parameters that didn't exist before the transaction is completed. for audit purpose)
        // Give value for the transaction
        // Update the transaction to note that you have given value for the transaction
        // You can also redirect to your success page from here

    }
}